{

module NCoreUtils.Data.Protocol.Lexer

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing
open NCoreUtils.Data.Protocol.Parser

// let newline (lexbuf: LexBuffer<_>) =
//   lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

let whitespace = [' ' '\t' ]
let num = ['0'-'9']
let alpha = ['a'-'z' 'A'-'Z' '_']

rule tokens = parse
  | "&&" { token.AND }
  | "||" { token.OR }
  | '='  { token.EQ }
  | "!=" { token.NEQ }
  | '<'  { token.LT }
  | '>'  { token.GT }
  | "<=" { token.LE }
  | ">=" { token.GE }
  | ','  { token.COMMA }
  | '('  { token.LPAREN }
  | ')'  { token.RPAREN }
  | whitespace+ { tokens lexbuf }
  | num+ { token.VALUE (LexBuffer<_>.LexemeString lexbuf) }
  | alpha (num | alpha)* { token.IDENT (LexBuffer<_>.LexemeString lexbuf) }
  | '"' ( [^'"'] | '\\' '"' )* '"' { token.VALUE (System.String (lexbuf.Lexeme, 1, lexbuf.LexemeLength - 2)) }
  | eof { token.EOF }